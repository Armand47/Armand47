#include <stdlib.h>
#include <iostream>
#include <conio.h>

using namespace std;
bool gameOver;
const int width = 20;
const int height = 20;
int x, y, fruitX, fruitY, score;
int tailX[100], tailY[100];//создаём два массива для хвоста на 100 элементов по обним осям х у
int nTail;//переменная в котую будут помещаться сами элементы нашего хвоста
enum  eDirection {STOP=0,LEFT,RIGHT,UP,DOWN};
eDirection dirr;
void Setup()//настройка параметров игры
{
	gameOver = false;
    dirr = STOP;
	x = width / 2-1;//добабляем по -1 к ширине и высоте так как ниже по коду прибавляли +1 к каждому из величин 
	y = height / 2-1;
	fruitX = rand() % width;
	fruitY = rand() % height;
	score = 0;
}
void Draw()//отображение игровой карты
{
	system("cls");
	for (int i = 0; i < width+1; i++)//заполнение ширины карты
		cout << "#";
	cout << endl;
	for (int i = 0; i < height; i++)//заполнение высоты карты
	{
		for (int j = 0; j < width; j++)
		{
			if (j == 0||j== width-1)
			
			cout << "#";
			if (i == y && j == x)//координата головы змейки
				cout << "0";
			else if (i == fruitY && j == fruitX)
				cout << "F";
			else
			{
				bool print = false;
				for (int k = 0; k < nTail; k++)
				{
					if (tailX[k] == j && tailY[k] == i)
					{
						print = true;
						cout << "o";
					}
						
				}
				if(!print)
			    cout << " ";
			}
			
		}
		cout << endl;
	}
	for (int i = 0; i < width+1; i++)//нижняя часть заполнения карты
		cout << "#";
	cout << endl;
	cout << "Score: " << score << endl; //счётчик набранных очков
}
void Input()//привязкак клавишь отвечающих за движение змейки
{
	if (_kbhit())//функция возвращает trye если пользователь нажимает какую либо клавишу
	{
		switch (_getch ())//getch отслеживает непосредственно сами нажатия клавишь
		{
		case'a':
	    dirr = LEFT;
		break;
		case'd':
		dirr = RIGHT;
		break;
		case'w':
	    dirr = UP;
		break;
		case's':
		dirr = DOWN;
		break;
		case'x'://если пользователь нажал х то игра закончится
		gameOver=true;
		break;
		}
	}
}
void logic()//логика игррового процесса
{
	int prevX = tailX[0];//переменная для определения предыдущей позиции по х
	int prevY = tailY[0];
	int prev2X, prev2Y;//переменные в которые му дудем помещать следующий элемент
	tailX[0] = x;//приравнивается для того что бы координаты хвоста были рядом с координатами головы
	tailY[0] = y;
	for (int i = 1; i < nTail; i++)//цикл для временного хранения элементов хвоста которые в процессе перезаписываются
	{
		prev2X = tailX[i];
		prev2Y = tailY[i];
		tailX[i] = prevX;
		tailY[i] = prevY;
		prevX = prev2X;
		prevY = prev2Y;
	}
	switch (dirr)
	{
	
	case LEFT:
		x--;
		break;
	case RIGHT:
		x++;
		break;
	case UP:
		y--;
		break;
	case DOWN:
		y++;
		break;	
	}
	//if (x > width || x < 0|| y>height|| y<0)
		//gameOver = true;
	if (x >= width-1)
		x = 0;
	else if (x < 0)
		x = width - 2;
	if (x >= height)
		x = 0;
	else if (y < 0)
		y = height - 1;
	for (int i = 0; i < nTail; i++)//проверка условий если мы сьедим свой хвост то игра закончится
	{
		if (tailX[i] == x && tailY[i] == y)
			gameOver = true;
	}
	if (x == fruitX && y == fruitY)
	{
		score += 10; 
		fruitX = rand() % width;
		fruitY = rand() % height;
		nTail++;
	}
}
int main()
{
	setlocale(LC_ALL, "ru");
	Setup();
	while (!gameOver)
	{
		Draw();
		Input();
		logic();
	}

}

